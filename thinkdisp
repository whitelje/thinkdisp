#!/usr/bin/env python
from thinkdisputil import custom_res
from thinkdisputil.util import UserConfig
import sys
import gtk
import appindicator

import subprocess
import time
import thread
import os

"""Future Features:
switching out the xorg.conf.nvidia so that optirun can actually be used properly
"""

class ThinkDisp:
    AVAIL_RES = ["1920x1200", "1920x1080", "1600x1200", "1680x1050", "1400x1050", 
          "1440x900", "1280x960", "1360x768", "1152x864", "800x600", "640x480"]

    SETTINGS = { }

    def __init__(self):
        self.ind = appindicator.Indicator("think-disp-indicator",
                                           "indicator-think",
                                      appindicator.CATEGORY_APPLICATION_STATUS)
        self.ind.set_status(appindicator.STATUS_ACTIVE)
        self.ind.set_icon("gsd-xrandr") 
        #^this is located in /usr/share/icons/ubuntu-mono-light/apps/24/

        #load user configuration
        self.u = UserConfig()
        self.SETTINGS["RESOLUTION"], self.SETTINGS["SIDE"], self.SETTINGS["ROTATION"] = self.u.get_settings()

        # insert custom resolutions into xrandr and thinkdisp
        new_res = self.u.initialize_customs()
        for res in new_res:
            self.AVAIL_RES.append(res)

        # menu setup
        self.menu_setup()
        self.ind.set_menu(self.menu)

    def menu_setup(self):
        self.menu = gtk.Menu()

        self.status_item = gtk.MenuItem("Check Status")
        self.status_item.connect("activate", self.status_check)
        self.status_item.show()
        self.menu.append(self.status_item)

        self.dispon_item = gtk.MenuItem("Turn Display On")
        self.dispon_item.connect("activate", self.start_disp)
        self.dispon_item.show()
        self.menu.append(self.dispon_item)

        self.dispoff_item = gtk.MenuItem("Turn Display Off")
        self.dispoff_item.connect("activate", self.kill_disp)
        self.dispoff_item.show()
        self.menu.append(self.dispoff_item)

        self.cardon_item = gtk.MenuItem("Turn Card On")
        self.cardon_item.connect("activate", self.card_on)
        self.cardon_item.show()
        self.menu.append(self.cardon_item)

        self.cardoff_item = gtk.MenuItem("Turn Card Off")
        self.cardoff_item.connect("activate", self.card_off)
        self.cardoff_item.show()
        self.menu.append(self.cardoff_item)

        self.prefs_item = gtk.MenuItem("Set Display Preferences")
        self.prefs_item.connect("activate", self.prefs)
        self.prefs_item.show()
        self.menu.append(self.prefs_item)

        self.about_item = gtk.MenuItem("About")
        self.about_item.connect("activate", self.about_popup)
        self.about_item.show()
        self.menu.append(self.about_item)
        
        self.quit_item = gtk.MenuItem("Quit")
        self.quit_item.connect("activate", self.quit)
        self.quit_item.show()
        self.menu.append(self.quit_item)

    def main(self):
        gtk.main()

    def quit(self, widget):
        sys.exit(0)

    def status_check(self, widget):
        a = subprocess.check_output(["cat", "/proc/acpi/bbswitch"])
        if "ON" in a:
            print("card is on")
            subprocess.call(["notify-send", 'thinkdisp', 
                                                      'The Nvidia card is on'])
        elif "OFF" in a:
            print("card is off")
            subprocess.call(["notify-send", 'thinkdisp', 
                                                     'The Nvidia card is off'])

    def card_on(self, widget):
        p = subprocess.Popen(["sudo", "tee", "/proc/acpi/bbswitch"], 
                                                         stdin=subprocess.PIPE)
        p.communicate(input="ON")
        self.status_check(0)

    def card_off(self, widget):	
        p = subprocess.Popen(["sudo", "tee", "/proc/acpi/bbswitch"], 
                                                         stdin=subprocess.PIPE)
        p.communicate(input="OFF")
        self.status_check(0)

    def prefs(self, widget):
        self.prefs_popup()

    def popup_test(self, message_text, dialog_title):
        label = gtk.Label(message_text)
        dialog = gtk.Dialog(dialog_title,
                    None,
                    gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                    (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
                     gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
        dialog.vbox.pack_start(label)
        label.show()
        response = dialog.run()
        dialog.destroy()

    def prefs_popup(self):
        dialog = gtk.Dialog("Display Preferences",
                    None,
                    gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                    (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT, 
                        gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))

        label2 = gtk.Label("External Monitor Resolution")
        dialog.vbox.pack_start(label2)
        label2.show()

        #RESOLUTION combobox
        combo = gtk.combo_box_new_text()
        for res in self.AVAIL_RES:
            combo.append_text(res)
        try:
            combo.set_active(self.AVAIL_RES.index(self.SETTINGS["RESOLUTION"]))
        except: # in case of value_error
            combo.set_active(0)
        dialog.vbox.pack_start(combo)
        combo.show()

        label3 = gtk.Label("My external monitor is to the ________ "
                                                    "of the thinkpad display")
        dialog.vbox.pack_start(label3)
        label3.show()

        #SIDE combobox
        sidecombo = gtk.combo_box_new_text()
        sidecombo.append_text("left")
        sidecombo.append_text("right")
        if self.SETTINGS["SIDE"]=="left":
            sidecombo.set_active(0)
        else:
            sidecombo.set_active(1)

        dialog.vbox.pack_start(sidecombo)
        sidecombo.show()

        label4 = gtk.Label("External Screen Rotation:")
        dialog.vbox.pack_start(label4)
        label4.show()

        rotcombo = gtk.combo_box_new_text()
        rotcombo.append_text("normal")
        rotcombo.append_text("left")
        rotcombo.append_text("right")
        if self.SETTINGS["ROTATION"]=="normal":
            rotcombo.set_active(0)
        elif self.SETTINGS["ROTATION"]=="left":
            rotcombo.set_active(1)
        else:
            rotcombo.set_active(2)

        dialog.vbox.pack_start(rotcombo)
        rotcombo.show()
        

        #run the dialog, get user input
        response = dialog.run()
        if response == gtk.RESPONSE_ACCEPT:
            print("changing settings")
            comboresp = combo.get_active_text()
            sidecomboresp = sidecombo.get_active_text()
            rotcomboresp = rotcombo.get_active_text()
            self.SETTINGS["RESOLUTION"] = comboresp
            self.SETTINGS["SIDE"] = sidecomboresp
            self.SETTINGS["ROTATION"] = rotcomboresp
            self.u.write_settings(self.SETTINGS)
        elif response == gtk.RESPONSE_REJECT:
            print("discarding changes")
        dialog.destroy()

        #terminal output
        print("External Monitor Resolution set to: " + 
                                                    self.SETTINGS["RESOLUTION"])
        print("External Monitor is to the " + self.SETTINGS["SIDE"] + 
                                                    " of the thinkpad display")
    
    def about_popup(self, widget):
        self.about()


    def about(self):
        label = gtk.Label("Developed by Sagar Karandikar "
                   "\n http://sagark.org \n http://github.com/sagark/thinkdisp")
        dialog = gtk.Dialog("About ThinkDisp:",
                    None,
                    gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                    (gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
        dialog.vbox.pack_start(label)
        label.show()
        response = dialog.run()
        dialog.destroy()

    
    #runs the commands to start the display using RESOLUTION and SIDE
    def start_disp(self, widget):
        subprocess.Popen(["optirun", "true"])
        time.sleep(1)
        subprocess.Popen(["xrandr", "--output", "LVDS1", "--auto", "--output", 
                         "VIRTUAL1", "--mode", str(self.SETTINGS["RESOLUTION"]),
                         "--rotate", str(self.SETTINGS["ROTATION"]), 
                               "--"+str(self.SETTINGS["SIDE"])+"-of", "LVDS1"])
		#YOU MUST HAVE screenclone in /usr/bin/
        time.sleep(1)
        subprocess.Popen(["intel-virtual-output"])
        self.status_check(0)

    def kill_disp(self, widget):
        subprocess.call(["killdisp"])
        self.status_check(0)


def switch_batt():
    counter = 0
    while True:
        counter += 1
        print(counter)
        print("switch")
        a = file("/proc/acpi/battery/BAT0/state")
        a.readline()
        a.readline()
        battstat = a.readline()
        if "charging" in battstat:
            print("not switching")
            #pass
        else:
            print("switching")
            ThinkDisp.kill_disp(0, 1)
        time.sleep(5)

"""def switch_batt_runner():
    counter = 0
    while True:
        counter+= 1
        print(counter)
        switch_batt()
        time.sleep(5)"""


if __name__ == "__main__":
    # prevents the weird gksudo lockup on boot
    time.sleep(5)

    ###ADD CODE HERE TO FIX PERMISSIONS ON FIRST RUN
    tmpUconf = UserConfig()
    if tmpUconf.perm_fixed not in "True":
        print("Since this appears to be the first run, set permissions to prevent"
                " having to ask for sudo pass every time")
        subprocess.call(["gksudo", "thinkdisp-fix-permissions"])
        tmpUconf.done_first_run()

   	#ensures that bbswitch dkms module is inserted and usable
    subprocess.call(["killdisp"])

    # start indicator
    indicator = ThinkDisp()
    indicator.main()
